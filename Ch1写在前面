# 1.写在前面

​	处于电子设计的世界令人振奋。随着Dennard缩规和Moore定律逐渐放缓，在这个领域也许从来没有过如此强烈的创新的需求。半导体公司尽可能地压榨每一滴性能，但是这些改进带来的代价也在持续上升。Chisel语言通过改进生产力减少了这样的代价。如果设计者能够通过复用在摊销验证成本的同时在更短时间内搭建更多设计，公司就可以在非重复工程上减轻消耗。另外，对于学生和个人贡献者也可以更简单地自行创新。

​	Chisel与大多数语言的不同在于它内嵌在scala编程语言内。基本上可以把Chisel视作用于表示同步数字电路的类和函数的库。一个Chisel设计实际上是能够伴随执行生成电路的Scala程序。对多数人来说，这也许有点反常“为什么不直接把Chisel设计成像是verilog和VHDL那样的独立语言呢？”对此我的回答是：软件世界在过去几十年里已经看到过太多实质性的设计方法上的创新，我们更愿意在已有的编程语言里自由使用这些特性而不是为了这些特性重新编写一门新的语言。

​	对于Chisel的批评最常见的是它难以学会。大部分这样的想法都是因为当下流行的专家创造的大型复杂电路要么是为了解决他们自己的研究，要么是为了商用。当人们学习一门常规的语言时，以c++为例，他并不需要从阅读GCC的源码开始，而是从大量的课程、教科书或是其他入门资料开始。在这本《使用Chisel设计数字电路》中，Martin为想要学习Chisel的人们创造了一份重要的资源。

​	Martin是一个经验丰富的教育者，从本书的组织结构可见一斑。从最初始的安装开始，他像是搭建筑一样一砖一瓦地构建起读者的全面理解。内附的练习题是帮助巩固理解的水泥，确保每个知识点在读者脑子里扎根。本书将重心放在硬件生成器部分，它就像是一个屋脊，支撑起其余部分的结构。本书的最后为读者提供了一个简单有用的设计：一个RISC处理器。

​	本书中，Martin为生产数字设计打下牢固的基础知识，要使用它搭建怎样的设计完全取决于你自己。
​																						--Jack Koenig Chisel 和 FIRRTL维护工程师 SiFive

# 
